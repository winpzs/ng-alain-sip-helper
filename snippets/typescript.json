{
    "sip-getset": {
        "prefix": "sip-getset",
        "body": [
            "private _${value}:${any};",
            "public get ${value}():${any}{",
            "\treturn this._${value};",
            "}",
            "public set ${value}(p:${any}){",
            "\tthis._${value} = p;",
            "}$0"
        ],
        "description": "getset"
    },
    "sip-lambda": {
        "prefix": "sip-lambda",
        "body": [
            "(${p})=>{$0}"
        ],
        "description": "lambda"
    },
    "sip-page": {
        "prefix": "sip-page",
        "body": [
            "let url = '/sip/ui-demo/create';",
            "this.\\$open(url).params({}).receive(r => {",
            "\tif (!r) return;",
            "\t$0console.log(url, r);",
            "});"
        ],
        "description": "$open(url)"
    },
    "sip-modal": {
        "prefix": "sip-modal",
        "body": [
            "let url = '/sip/ui-demo/create';",
            "this.\\$modal(url).params({ id: '' }).receive(r => {",
            "\tif (!r) return;",
            "\t$0console.log(url, r);",
            "});"
        ],
        "description": "$modal(url)"
    },
    "sip-accessManager": {
        "prefix": "sip-accessManager",
        "body": [
            "@SipAccess<${Component}>()",
            "${accessManager}: SipAccessManager;$0"
        ],
        "description": "@SipAccess"
    },
    "sip-access-item": {
        "prefix": "sip-access-item",
        "body": ["@SipAccessItem<${TableComponent}>('${access}', {",
            "\tmulti: false, hasData: true,",
            "\tcheck: function () {",
            "\t\treturn true;",
            "\t}",
            "})",
            "${access}() {",
            "}$0"],
        "description": "@SipAccessItem"
    },
    "sip-access-item-only": {
        "prefix": "sip-access-item",
        "body": ["@SipAccessItem('${access}')",
            "${access}() {",
            "}$0"],
        "description": "@SipAccessItem"
    },
    "sip-searchContent": {
        "prefix": "sip-searchContent",
        "body": [
            "searchContent = {",
            "\tcontent: '',",
            "\tsearch: () => {",
            "\t\tthis.tableManager1.search({ content: this.searchContent.content });",
            "\t}",
            "};$0"
        ],
        "description": "searchContent"
    },
    "sip-tablemanager": {
        "prefix": "sip-tablemanager",
        "body": [
            "/**table管理器 */",
            "${tableManager1}$0: MinitableManager = new MinitableManager({",
            "\tconnstr: 'iaas',",
            "\tsqlId: 'iaas_Instance.List.GetByOwnerID',",
            "\tmultiSelect: true,",
            "\t//datas: this.nzdata,",
            "\tonSearch: (searchParams: object) => {",
            "\t\tLib.extend(searchParams, {",
            "\t\t\tcontent: '',",
            "\t\t\tRegionID: '', projectId: '',",
            "\t\t\telStatus: 'active', tag: '',",
            "\t\t\tStatus: '', \"Status2\": \"shutting-down,terminated\"",
            "\t\t});",
            "\t},",
            "\t/** 过滤器设置 */",
            "\tfilters: {",
            "\t\t/**列名 */",
            "\t\tStatus: {",
            "\t\t\titems: [",
            "\t\t\t\t{ text: '运行中', value: 'running' },",
            "\t\t\t\t{ text: '停机', value: 'stopped' }",
            "\t\t\t],",
            "\t\t\tonFilter(p) {",
            "\t\t\t\tlet values = p.values;",
            "\t\t\t\tlet params = { elStatus: '', Status: '' }",
            "\t\t\t\tif (values.length > 0) {",
            "\t\t\t\t\tparams.elStatus = '';",
            "\t\t\t\t\tparams.Status = values.join(',');",
            "\t\t\t\t} else {",
            "\t\t\t\t\tparams.elStatus = 'active';",
            "\t\t\t\t\tparams.Status = values.join(',');",
            "\t\t\t\t}",
            "\t\t\t\tthis.search(params);",
            "\t\t\t}",
            "\t\t}",
            "\t},",
            "\t/**初始化时触发，表示table已经可以使用 */",
            "\tonInit() {",
            "\t\tconsole.log('onInit tableManager');",
            "\t},",
            "\t/**选择改变时触发 */",
            "\tonSelectChanged: (rows) => {",
            "\t\tthis.accessManager.check(this.${tableManager1}.selectDatas);",
            "\t},",
            "\t/**每次数据加载完成后并处理table业务时触发 */",
            "\tonCompleted() {",
            "\t\tconsole.log('onCompleted');",
            "\t},",
            "\tcontextmenu: (menu, rows) => {",
            "\t\tif (!rows.length) { menu.items = []; return; };",
            "\t\tlet row = rows[0], data = row.data;",
            "",
            "\t\tmenu.items = [",
            "\t\t\t{",
            "\t\t\t\ttitle: '测试',",
            "\t\t\t\tdisabled: false,",
            "\t\t\t\tonClick: (p) => {",
            "\t\t\t\t\tthis.ctxTest();",
            "\t\t\t\t}",
            "\t\t\t}",
            "\t\t];",
            "\t}",
            "});"
        ],
        "description": "MinitableManager"
    },
    "sip-evnet-var": {
        "prefix": "sip-evnet-var",
        "body": [
            "on${Event}: EventEmitter<${any}> = new EventEmitter<${any}>();"
        ],
        "description": "EventEmitter"
    },
    "sip-contentchild": {
        "prefix": "sip-contentchild",
        "body": [
            "@ContentChild(${Component}) ${component1}:${Component};$0"
        ],
        "description": "@ContentChild(${Component}) ${component1}:${Component};"
    },
    "sip-contentchild-tmplref": {
        "prefix": "sip-contentchild-tmplref",
        "body": [
            "@ContentChild('${id}') ${name}: TemplateRef<any>;$0"
        ],
        "description": "@ContentChild('${id}') ${name}: TemplateRef<any>;"
    },
    "sip-viewchild": {
        "prefix": "sip-viewchild",
        "body": [
            "@ViewChild(${Component}) ${component1}:${Component};$0"
        ],
        "description": "@ViewChild(${Component}) ${component1}:${Component};"
    },
    "sip-viewchild-tmplref": {
        "prefix": "sip-viewchild-tmplref",
        "body": [
            "@ViewChild('${id}') ${name}: TemplateRef<any>;$0"
        ],
        "description": "@ViewChild('${id}') ${name}: TemplateRef<any>;"
    },
    "sip-subscribe": {
        "prefix": "sip-subscribe",
        "body":["@SipSubscribe('${testsubs}')",
            "private _${testSubscribe}(p: any) {",
            "    console.log('_${testSubscribe}', p);",
            "}$0"],
        "description": "@SipSubscribe"
    },
    "sip-watch": {
        "prefix": "sip-watch",
        "body":["@SipWatch('this.${propname}')",
        "private _${watchTitle}(${propname}) {",
        "    console.log('SipWatch', ${propname});",
        "}$0"],
        "description": "@SipWatch"
    }
}